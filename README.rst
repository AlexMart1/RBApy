rba: Resource Balance Analysis
==============================

A workflow that obtains various annotation info
from the `UniProt database <https://www.uniprot.org>`_ for any organism.
This module also exports various files that are used for
initialization of a RBA problem as proposed by
`MaiAGE <http://maiage.jouy.inra.fr>`_.

Getting Started
---------------

This workflow was tested with Python 2.7 and 3.5. Make sure you have
 - the full rba package.
 - a SBML file for your favorite organism (see requirements below).

Running
-------

Put the SBML file in the `input` directory and fill in the
parameter file `input/params.in`. Then open a console at the root
of the repository and run:

```
python generate_xml_file.py input/params.in
```

or, more generally:

```
python generate_xml_file.py path/to/params.in
```
The script will generate several files used as an input for the RBA solver.
By default, they will be written to the `output` directory.

Warning: for the first run, the script will download and parse Uniprot data
as best it can. Unfortunately, numerous values cannot be parsed properly and
are replaced with default values. The script will generate many helper files
to replace these default values with hand-curated values. You should fill in
these helper files and rerun the script to obtain more relevant output
(see instructions below).

Once the RBA model was generated, you can solve it using:

```
python solve_rba_model.py path/to/model
```

where the path points to the directory containing the XML files defining
the RBA model.


Helper Files
------------

Several helper files are generated by the program. They will all be located
in the input directory *after* the script has been run for the first time.
 - `uniprot.csv`: protein data downloaded from uniprot. Users can modify
   this file (but it is usually not necessary) or replace it with a uniprot
   file of their own (at their own risk if important columns are missing!).
 - `unknown_proteins.tsv`: proteins used to define enzymes in the SBML file
   that could not be retrieved in uniprot. User should replace values tagged
   as `[MISSING]` with a uniprot identifier, an average protein (ids of the
   type `average_protein_xxx` as defined in `proteins.xml`) or leave empty
   for spontaneous reactions.
 - `metabolites.tsv`: metabolite ID mapping with SBML for (a) processes: metabolites 
 involved in translation and transcription, (b) targets: metabolites that 
 have a target concentration, (c) protein cofactors imported from Uniprot.
 for every metabolite, user should check inferred values and fill in fields tagged
   as `[MISSING]`. Metabolites with [MISSING] field will be ignored in the final model.
 - `cofactors.tsv`: for every protein, lists name, chebi identifier and
   stoichiometry of cofactors. Based on the last column (containing uniprot
   annotation), user should check inferred values and fill in fields tagged
   as `[MISSING]`. Important: if annotation says that there is *no* cofactor,
   *do not* remove line from csv file. Ignore name and chebi fields and set
   stoichiometry to 0.
 - `subunits.tsv`: this file is used to retrieve the stoichiometry of a
   protein within its enzymatic complex. For every ambiguous entry, gene
   name and protein name are provided for proper identification. User
   should read annotation field and provide `[MISSING]` stoichiometry.
 - `location_map.tsv`: this file is used to link uniprot location ids
   with user-defined compartment ids. For every
   uniprot location, user may fill in a name compartment
   (e.g. SBML compartment names). The idea behind this
   file is that it can be used to fuse compartments or ignore them.
   If the field is left empty (or `[MISSING]`), a compartment named after
   uniprot location is created.
 - `locations.tsv`: this file lists proteins for which uniprot has no
   location data. Protein and gene names are given to help fill in missing
   locations. Note that locations *must* correspond to names
   defined in `location_map.tsv` (user name if one was defined,
   else Uniprot name). If fields are left empty or `[MISSING]`,
   proteins are assumed to be located in `Cytoplasm` (or user-defined
   counterpart as defined in `location_map.tsv`.

In order for the RBA results to be relevant, please fill in as much
information as possible. Every time you provide new information, please
rerun the pipeline to regenerate RBA input properly.


SBML file requirements
----------------------

The SBML file must be a valid SBML file, with gene-reaction associations. 
RBApy assumes that the boolean relation is always “or”s of “and”s, e.g. (g1 and g2) or (g3 and g4) 
Moreover, the words  “or” and “and” must be written in lowercase letters.
Empty fields in Gene-association will be interpreted as a diffusion reaction. 


Repository structure and files:
-------------------------------

pipeline
  |
  +------ input (default input directory)
  +------ input/params.in (sample parameter file)
  |
  +------ output (default output directory)
  |
  +------ rba (rba package)
  |
  |
  + generate_xml_files.py (script generating RBA model)
  + solve_model.py (script solving RBA model)

Authors
-------
Copyright (c) 2018 INRA - MaIAGE - France.
S. Fischer, A. Bulovic, A. Goelzer

License
-------
RBApy is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

RBApy is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with RBApy.  If not, see <https://www.gnu.org/licenses/>

Citation
---------------
